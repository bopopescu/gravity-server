"""
Django settings for JokrBackend project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
#===============================================================================
# Jokr Backend development server settings file
#
# Nick Wrobel
# Created: 5/2/15
# Modified: 10/22/15
#===============================================================================

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from django.conf.global_settings import APPEND_SLASH

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jqe#b&(f797rq7^4019drdopnj5b&acu^pqm7oek%rvdxfb0yz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['jokrbackend.ddns.net']SERVER_SIDE_ANALYTICS = True # toggles server-side analytics (logging info in our databases)


#------------------------------------------------------------------------------ 
# Settings customized to JokrBackend

HTTP_RESPONSE_MESSAGES = True # enables a more detailed server response
PRUNE_OLD_LOCALPOSTS = False # delete old localposts after time limit
PRUNE_OLD_MESSAGES = False # delete old messages after time limit
PRUNE_OLD_USERS = False # delete unused user accounts after time limit
RATE_LIMIT_LOCAL = False # limit the rate a user posts to local
RATE_LIMIT_LIVE = False # limit the rate a user posts to live (replies)
OP_THREAD_LIMIT = False # limits the OP to X threads at a time
HIDE_OWN_LOCALPOSTS = False # determines if a user can see his own posts on local

THIRD_PARTY_ANALYTICS = True # toggles sending data to 3rd party analytics 
SERVER_SIDE_ANALYTICS = True # toggles server-side analytics (logging info in our databases)


# Application definition
# Include 'JokrBackned' here to tell django about our app
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'JokrBackend'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'JokrBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'JokrBackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jokrbackend_db',
        'USER': 'root',
        'PASSWORD': 'Win32.64.128.exe!',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = False

APPEND_SLASH = False # Makes URLs without the trailing '/' 404


LOG_LOCATION = '/var/log/JokrBackend/' # location of the log files


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    
    # Formatters - control how the log is textually written to the text file
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
           
    # Handlers - controls what to do with the log message.
    'handlers': {
        # catchall loggers
        'django_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'django.log',
            'formatter': 'verbose'
        },
        'JokrBackend_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'jokrbackend.log',
            'formatter': 'verbose'
        },
        # local 
        'JokrBackend_LocalUpload_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/local-upload.log',
            'formatter': 'verbose'
        },
        'JokrBackend_LocalGet_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/local-get.log',
            'formatter': 'verbose'
        },
        # message
        'JokrBackend_MessageUpload_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/message-upload.log',
            'formatter': 'verbose'
        },  
        'JokrBackend_MessageGet_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/message-get.log',
            'formatter': 'verbose'
        },   
        # live
        'JokrBackend_LiveUpload_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/live-upload.log',
            'formatter': 'verbose'
        },
        'JokrBackend_LiveGet_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/live-get.log',
            'formatter': 'verbose'
        },  
        # reply
        'JokrBackend_ReplyUpload_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/reply-upload.log',
            'formatter': 'verbose'
        },  
        'JokrBackend_ReplyGet_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/reply-get.log',
            'formatter': 'verbose'
        }, 
        # security    
        'JokrBackend_SecurityCreate_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/security-create.log',
            'formatter': 'verbose'
        },
        # moderation
         'JokrBackend_ModerationBlock_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'urls/moderation-block.log',
            'formatter': 'verbose'
        }, 
        # security layer 
        'JokrBackend_SecurityLayerBreach_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'security/securitylayer-breach.log',
            'formatter': 'verbose'
        },  
        'JokrBackend_SecurityLayerAction_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'security/securitylayer-action.log',
            'formatter': 'verbose'
        },          
        # pruning                         
        'JokrBackend_PruneUsers_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'pruning/prune-users.log',
            'formatter': 'verbose'
        },                    
        'JokrBackend_PruneLocalPosts_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'pruning/prune-localposts.log',
            'formatter': 'verbose'
        },  
        'JokrBackend_PruneMessages_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'pruning/prune-messages.log',
            'formatter': 'verbose'
        }, 
        # analytics
        'JokrBackend_Analytics_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_LOCATION + 'analytics/analytics.log',
            'formatter': 'verbose'
        }, 
        # null handler
        'null': {
            'level': 'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
    },
           
    # Loggers - sends the log message to the right handler.
    #    django - all messages from djangos internals will use django_file
    #    JokrBackend - all messages from the JokrBackend app will use JokrBackend_file
    #    JokrBackend.Views.Local.UploadLocalPostView - all messages from this view will
    #       use the JokrBackend_UploadLocalPost_file handler
    'loggers': {
        # catchall loggers
        'django': {
            'handlers':['django_file'],
            'propagate': True,
            'level':'DEBUG',
        },
        'JokrBackend': {
            'handlers': ['JokrBackend_file'],
            'level': 'DEBUG',
        },
        # local
        'JokrBackend.Views.Local.UploadLocalPostView': {
            'handlers': ['JokrBackend_LocalUpload_file'],
            'level': 'DEBUG',
            'propagate': False, # Prevents things from being logged globally in 'JokrBackend'
        },
        'JokrBackend.Views.Local.GetLocalPostView': {
            'handlers': ['JokrBackend_LocalGet_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        # message
       'JokrBackend.Views.Message.UploadMessageView': {
            'handlers': ['JokrBackend_MessageUpload_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        'JokrBackend.Views.Message.GetMessageView': {
            'handlers': ['JokrBackend_MessageGet_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },   
        # live
         'JokrBackend.Views.Live.UploadThreadView': {
            'handlers': ['JokrBackend_LiveUpload_file'],
            'level': 'DEBUG',
            'propagate': False, 
        }, 
         'JokrBackend.Views.Live.GetThreadView': {
            'handlers': ['JokrBackend_LiveGet_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },       
        'JokrBackend.management.commands.PruneLocalPosts': {
            'handlers': ['JokrBackend_PruneLocalPostsFromDb_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        # reply
      'JokrBackend.Views.Reply.UploadReplyView': {
            'handlers': ['JokrBackend_ReplyUpload_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },     
      'JokrBackend.Views.Reply.GetReplyView': {
            'handlers': ['JokrBackend_ReplyGet_file'],
            'level': 'DEBUG',
            'propagate': False, 
        }, 
        # security
         'JokrBackend.Views.Security.CreateUserView': {
            'handlers': ['JokrBackend_SecurityCreate_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        # moderation
        'JokrBackend.Views.Moderation.BlockView': {
            'handlers': ['JokrBackend_ModerationBlock_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },  
        # security layer
         'JokrBackend.Security.SecurityChecker': {
            'handlers': ['JokrBackend_SecurityLayerBreach_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        'JokrBackend.Security.SecurityActuator': {
            'handlers': ['JokrBackend_SecurityLayerAction_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },                           
        # pruning
        'JokrBackend.management.commands.PruneUsers': {
            'handlers': ['JokrBackend_PruneUsers_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        'JokrBackend.management.commands.PruneLocalPosts': {
            'handlers': ['JokrBackend_PruneLocalPosts_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        'JokrBackend.management.commands.PruneMessages': {
            'handlers': ['JokrBackend_PruneMessages_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },
        # analytics
        'JokrBackend.Analytics': {
            'handlers': ['JokrBackend_Analytics_file'],
            'level': 'DEBUG',
            'propagate': False, 
        },

        # to stifle mysql logging, set the DB package to use the null handler
        'django.db.backends': {
            'handlers': ['null'],  # Quiet by default!
            'propagate': False,
            'level':'DEBUG',
        },
    }
}



