#===============================================================================
# Module for all models
# 
# Nick Wrobel
# Created: 4/27/15
# Modified: 1/5/16
#===============================================================================

import time 
from django.db import models
import JokrBackend.Constants as Const
import JokrBackend.Custom.Utils as Utils
from JokrBackend.Custom.ModelFields import UUIDBinaryField

#*******************************************************************************
# Client Analytics models
# Useful for behavior and usage tracking.
#*******************************************************************************
    
#*******************************************************************************
# Logging models
# Used for logging of server-side events
#*******************************************************************************
class Logging:
    #---------------------------------------------------------------------------
    # Used when a thread is pruned due to bump order
    # A server side event
    #---------------------------------------------------------------------------
    class ThreadPrunedEvent(models.Model):
        id = UUIDBinaryField(primary_key=True, default=Utils.CreateNewUUIDForDB, null=False)
        timeCreated = models.IntegerField(default=time.time, null=False)  
        timeThreadPruned = models.IntegerField(default=None, null=False)
        threadID = UUIDBinaryField(default=None, null=False)
    
        class Meta:
            db_table = Const.Database.TableNames.Logging.THREAD_PRUNED
        
    #--------------------------------------------------------------------------
    # Analytics on a localpost pruning event
    # a server side event
    #---------------------------------------------------------------------------
    class LocalPostsPrunedEvent(models.Model):
        id = UUIDBinaryField(primary_key=True, default=Utils.CreateNewUUIDForDB, null=False)
        timeCreated = models.IntegerField(default=time.time, null=False)
        messageCode = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.MESSAGE_CODE)
         
        numOldPosts = models.IntegerField(default=None, null=False)
        numDeletedPosts = models.IntegerField(default=None, null=False)
         
        class Meta:
            db_table = Const.Database.TableNames.Logging.LOCALPOSTS_PRUNED
         
    #---------------------------------------------------------------------------
    # Analytics on a message pruning event
    # a server side event
    #---------------------------------------------------------------------------
    class MessagesPrunedEvent(models.Model):
        timeCreated = models.IntegerField(default=time.time, null=False)
        messageCode = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.MESSAGE_CODE)
         
        numOldMessages = models.IntegerField(default=None, null=False)
        numDeletedMessages = models.IntegerField(default=None, null=False)
         
        class Meta:
            db_table = Const.Database.TableNames.Logging.MESSAGES_PRUNED
             
    #---------------------------------------------------------------------------
    # Analytics on static content pruning
    # a server side event
    #---------------------------------------------------------------------------
    class StaticContentPrunedEvent(models.Model):
        timeCreated = models.IntegerField(default=time.time, null=False)
        messageCode = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.MESSAGE_CODE)
         
        numRequestedForDeleteion = models.IntegerField(default=None, null=False)
        numDeleted = models.IntegerField(default=None, null=False)
         
        class Meta:
            db_table = Const.Database.TableNames.Logging.STATIC_CONTENT_PRUNED
             
             
    #---------------------------------------------------------------------------
    # Analytics on a server-initiated notification event.
    #---------------------------------------------------------------------------
    class NotificationSentEvent(models.Model):
        timeCreated = models.IntegerField(default=time.time, null=False)
        messageCode = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.MESSAGE_CODE)
         
        deliveryType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Analytics.NOTIFICATION_DELIVERY_TYPE)
        notificationType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Analytics.NOTIFICATION_TYPE)
        numCollapsedNotifcations = models.IntegerField(default=None, null=False) # how many 'notifications' are bundled into this one (many server errors sent in one email, for ex)
         
        class Meta:
            db_table = Const.Database.TableNames.Logging.NOTIFICATION_SENT
         
         
 
#*******************************************************************************
# Content Models
# Database content that is critical to make the core features of the app run.
#*******************************************************************************
class Content:
    class OnlineContent(models.Model):
#-------------------------------------------------------------------------------
# Model for a user account
#-------------------------------------------------------------------------------
class User(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False)
    uuid = UUIDBinaryField(db_index=True, default=None, null=False)
    timeLastUsed = models.IntegerField(db_index=True, default=time.time, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.Content.USER
 
#-------------------------------------------------------------------------------
# Model for a live board
#-------------------------------------------------------------------------------
class Board(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False)
    name = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Content.BOARD_NAME)
 
    class Meta:
        db_table = Const.Database.TableNames.Content.BOARD
         
#-------------------------------------------------------------------------------
# Model for a single piece of content (message, localpost, thread, or reply)
#-------------------------------------------------------------------------------
class PostableContent(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False) 
    fromUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    url = models.CharField(default=None, null=True, max_length=Const.Database.MaxLengths.STATIC_URL)
    contentType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.CONTENT_TYPE)
     
    class Meta:
        db_table = Const.Database.TableNames.PostableContent.POSTABLE_CONTENT
     
#-------------------------------------------------------------------------------
# Model for a local post
#-------------------------------------------------------------------------------   
class LocalPost(PostableContent):
    cid = models.OneToOneField(PostableContent, parent_link=True)
    latitude = models.DecimalField(max_digits=9, decimal_places=6, db_index=True, default=None, null=False)
    longitude = models.DecimalField(max_digits=9, decimal_places=6, db_index=True, default=None, null=False)
    text = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Content.LOCALPOST_TEXT)
    arn = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.AWS_ARN)
     
    class Meta:
        db_table = Const.Database.TableNames.PostableContent.LOCALPOST
         
#-------------------------------------------------------------------------------
# Model for a user-user message
#-------------------------------------------------------------------------------
class Message(PostableContent):
    cid = models.OneToOneField(PostableContent, parent_link=True)
    toUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    text = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Content.MESSAGE_TEXT)
  
    class Meta:
        db_table = Const.Database.TableNames.PostableContent.MESSAGE
         
#-------------------------------------------------------------------------------
# Model for a thread on live
#-------------------------------------------------------------------------------
class Thread(PostableContent):
    cid = models.OneToOneField(PostableContent, parent_link=True)
    title = models.CharField(max_length=Const.Database.MaxLengths.Content.THREAD_TITLE, default=None, null=False)
    text = models.CharField(max_length=Const.Database.MaxLengths.Content.THREAD_TEXT, default=None, null=False)
    arn = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.AWS_ARN)
     
    # Optional fields, denormalized
    timeOfLastReply = models.IntegerField(default=time.time, null=False)
    replyCount = models.IntegerField(default=None, null=False)
    uniquePostersCount = models.IntegerField(default=None, null=False)
    imageReplyCount = models.IntegerField(default=None, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.PostableContent.THREAD
              
#-------------------------------------------------------------------------------
# Model for a thread reply
#-------------------------------------------------------------------------------
class Reply(PostableContent):
    cid = models.OneToOneField(PostableContent, parent_link=True)
    parentThread = models.ForeignKey(Thread, related_name='+', default=None, null=False)
    # name = models.CharField(max_length=Const.Database.MaxLengths.Content.REPLY_NAME, default=None, null=True)
    text = models.CharField(max_length=Const.Database.MaxLengths.Content.REPLY_TEXT, default=None, null=True)
      
    class Meta:
        db_table = Const.Database.TableNames.PostableContent.REPLY
         
#-------------------------------------------------------------------------------
# Model for a single piece of archived content 
# (message, localpost, thread, or reply)
#-------------------------------------------------------------------------------
class ArchivedPostableContent(models.Model):
    id = models.IntegerField(default=None, null=False, primary_key=True) 
    timeArchived = models.IntegerField(default=time.time, null=False) 
    timeCreated = models.IntegerField(default=None, null=False) 
    fromUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    url = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.STATIC_URL)
    contentType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.CONTENT_TYPE)
     
    class Meta:
        db_table = Const.Database.TableNames.ArchivedPostableContent.ARCHIVED_POSTABLE_CONTENT
     
#-------------------------------------------------------------------------------
# Model for a localpost snapshot, a way to preserve a localpost 
#-------------------------------------------------------------------------------       
class LocalPostArchive(ArchivedPostableContent):
    archiveID = models.OneToOneField(ArchivedPostableContent, parent_link=True)
    latitude = models.DecimalField(max_digits=9, decimal_places=6, db_index=True, default=None, null=False)
    longitude = models.DecimalField(max_digits=9, decimal_places=6, db_index=True, default=None, null=False)
    text = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Content.LOCALPOST_TEXT)
     
    class Meta:
        db_table = Const.Database.TableNames.ArchivedPostableContent.LOCALPOST
         
#-------------------------------------------------------------------------------
# Model for a message snapshot, a way to preserve a message
#-------------------------------------------------------------------------------
class MessageArchive(ArchivedPostableContent):
    archiveID = models.OneToOneField(ArchivedPostableContent, parent_link=True)
    toUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    text = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Content.MESSAGE_TEXT)
     
    class Meta:
        db_table = Const.Database.TableNames.ArchivedPostableContent.MESSAGE
 
#-------------------------------------------------------------------------------
# Model for a thread snapshot, a way to preserve a thread 
#-------------------------------------------------------------------------------      
class ThreadArchive(ArchivedPostableContent):
    archiveID = models.OneToOneField(ArchivedPostableContent, parent_link=True)
    name = models.CharField(max_length=Const.Database.MaxLengths.Content.THREAD_NAME, default=None, null=True)
    title = models.CharField(max_length=Const.Database.MaxLengths.Content.THREAD_TITLE, default=None, null=True)
    text = models.CharField(max_length=Const.Database.MaxLengths.Content.THREAD_TEXT, default=None, null=False)
          
    # Optional fields, denormalized
    timeOfLastReply = models.IntegerField(default=None, null=False)
    replyCount = models.IntegerField(default=None, null=False)
    uniquePostersCount = models.IntegerField(default=None, null=False)
    imageReplyCount = models.IntegerField(default=None, null=False)
      
    class Meta:
        db_table = Const.Database.TableNames.ArchivedPostableContent.THREAD
          
#-------------------------------------------------------------------------------
# Model for a reply snapshot, a way to preserve a reply 
#-------------------------------------------------------------------------------       
class ReplyArchive(ArchivedPostableContent):
    archiveID = models.OneToOneField(ArchivedPostableContent, parent_link=True)
    parentThread = models.ForeignKey(ArchivedPostableContent, related_name='+', default=None, null=False)
    name = models.CharField(max_length=Const.Database.MaxLengths.Content.REPLY_NAME, default=None, null=True)
    text = models.CharField(max_length=Const.Database.MaxLengths.Content.REPLY_TEXT, default=None, null=True)
      
    class Meta:
        db_table = Const.Database.TableNames.ArchivedPostableContent.REPLY
   
   
#*******************************************************************************
# Moderation models
# Database content that is used for moderation
#*******************************************************************************
 
#-------------------------------------------------------------------------------
# Model for a user-user block (used in the local feed)
#-------------------------------------------------------------------------------
class Block(models.Model):
    blockerUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    blockedUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    timeCreated = models.IntegerField(default=time.time, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.Moderation.BLOCK
 
#-------------------------------------------------------------------------------
# Model representing an action taken by a moderation on a piece of reported
# content.
#-------------------------------------------------------------------------------
class ModAction(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False) 
    result = models.CharField(default=None, null=False, max_length=3)
    cid = models.IntegerField(default=None, null=False)
    contentType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.CONTENT_TYPE)
   
    class Meta:
        db_table = Const.Database.TableNames.Moderation.MOD_ACTION
     
#-------------------------------------------------------------------------------
# Model for a single report of a piece of content. Used for moderation
#-------------------------------------------------------------------------------
class Report(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False) 
    fromUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    cid = models.IntegerField(default=None, null=False)
    modAction = models.ForeignKey(ModAction, related_name='+', default=None, null=True)
    contentType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.CONTENT_TYPE)
  
    class Meta:
        db_table = Const.Database.TableNames.Moderation.REPORT
 
#-------------------------------------------------------------------------------
# Model for a user ban
#-------------------------------------------------------------------------------
class Ban(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False) 
    bannedUser = models.ForeignKey(User, related_name='+', default=None, null=False) 
    banLengthHours = models.IntegerField(default=None, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.Moderation.BAN
  
        
#*******************************************************************************
# Models used for logging server errors.
#*******************************************************************************
 
#-------------------------------------------------------------------------------
# Model for a server error (500 type). To be used by the devs for realtime
# alerts and bug notification.
#-------------------------------------------------------------------------------
class ServerError(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False)
    file = models.CharField(max_length=Const.Database.MaxLengths.ServerError.FILENAME, default=None, null=False)
    lineNum = models.IntegerField(default=None, null=False)
    exeptionMessage = models.TextField(default=None, null=False)
    stackTrace = models.TextField(default=None, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.ServerError.ERROR
         
#*******************************************************************************
# Models that are used in the security layer.
# Good for identifying security threats
#*******************************************************************************
 
#-------------------------------------------------------------------------------
# Model for a security error. 
#-------------------------------------------------------------------------------
class SecurityError(models.Model):
    timeCreated = models.IntegerField(default=time.time, null=False)
 
    # Client info
    fromUser = models.ForeignKey(User, related_name='+', default=None, null=True) # Note: we do allow null values here
    userIP = models.GenericIPAddressField(protocol='both', unpack_ipv4=False, default=None, null=False)
     
    # Request info
    requestURL = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Security.ERROR_REQUESTED_URL)
    requestMethod = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Security.ERROR_REQUEST_METHOD)
    requestContentType = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Security.ERROR_REQUEST_CONTENT_TYPE)
    requestData = models.TextField(default=None, null=False)
     
    # Security layer result
    responseCode = models.SmallIntegerField(default=None, null=False)
    checkResult = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Security.ERROR_CHECK_RESULT)
             
    class Meta:
        db_table = Const.Database.TableNames.Security.ERROR
         
#-------------------------------------------------------------------------------
# Model for a temporarily client session token
# Tokens are generated by AWS cognito and we also use them in our servers
#-------------------------------------------------------------------------------
class SessionToken(models.Model):
    timeCreated = models.IntegerField(default=None, null=False)
    timeExpires = models.IntegerField(default=None, null=False)
    forUser = models.ForeignKey(User, related_name='+', default=None, null=False)
    token = models.CharField(default=None, null=False, max_length=Const.Database.MaxLengths.Security.SESSION_TOKEN)
     
    class Meta:
        db_table = Const.Database.TableNames.Security.SESSION_TOKEN
         
#-------------------------------------------------------------------------------
# Temp table to store a single value: the time that an email notifcation
# was just sent out. This is a hack to prevent thousands of emails from being
# sent and killing the server
#-------------------------------------------------------------------------------
class TimeLastNotifcationSent(models.Model):
    timeLastSent = models.IntegerField(default=None, null=False)
     
    class Meta:
        db_table = Const.Database.TableNames.NOTIFICATION_TEMP_TIME_LAST_SENT
         


        

        

        
