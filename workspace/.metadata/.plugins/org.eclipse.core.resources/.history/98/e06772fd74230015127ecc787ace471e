"""
Django settings for Boomerang project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
#===============================================================================
# BOOMERANG DEVELOPMENT SETTINGS FILE
#
# Use this file for test/development. Image files and logs are placed in their
# test locations, and debug is turned on.
#
# Nick Wrobel
# Created: 5/2/15
# Modified: 7/3/15
#===============================================================================

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jqe#b&(f797rq7^4019drdopnj5b&acu^pqm7oek%rvdxfb0yz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
# Include 'Boomerang' here to tell django about our app
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Boomerang'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'Boomerang.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Boomerang.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# Use the boomerang_test db
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'boomerang_test',
        'USER': 'root',
        'PASSWORD': 'Win32.64.128.exe!',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

#USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# Location of data files for Boomerang, for testing only 
# MEDIA_ROOT is used in the models by the FileField data type
MEDIA_ROOT = '/var/webserver-data/test/'

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    
    # Formatters - control how the log is textually written to the text file
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    # Handlers - controls what to do with the log message.
    #     django_file - write logs to django.log
    #     boomerang_file - writes logs to boomerang.log
    #     boomerang_UploadLocalPost_file - writes logs to upload-local-post.log
    'handlers': {
        'django_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT + '/logs/django.log',
            'formatter': 'verbose'
        },
        'boomerang_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT + '/logs/boomerang.log',
            'formatter': 'verbose'
        },
        'boomerang_UploadLocalPost_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT + '/logs/upload-local-post.log',
            'formatter': 'verbose'
        },
        'boomerang_GetLocalPosts_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT + '/logs/get-local-posts.log',
            'formatter': 'verbose'
        },
        'boomerang_PruneLocalPostsFromDb_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT + '/logs/prune-local-posts.log',
            'formatter': 'verbose'
        },                
        'null': {
            'level': 'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
    },
    # Loggers - sends the log message to the right handler.
    #    django - all messages from djangos internals will use django_file
    #    Boomerang - all messages from the Boomerang app will use boomerang_file
    #    Boomerang.Views.UploadLocalPostView - all messages from this view will
    #       use the boomerang_UploadLocalPost_file handler
    'loggers': {
        'django': {
            'handlers':['django_file'],
            'propagate': True,
            'level':'DEBUG',
        },
        'Boomerang': {
            'handlers': ['boomerang_file'],
            'level': 'DEBUG',
        },
        'Boomerang.Views.UploadLocalPostView': {
            'handlers': ['boomerang_UploadLocalPost_file'],
            'level': 'DEBUG',
            'propagate': False, # Prevents things from being logged globally in 'Boomerang'
        },
        'Boomerang.Views.GetLocalPostsView': {
            'handlers': ['boomerang_GetLocalPosts_file'],
            'level': 'DEBUG',
            'propagate': False, # Prevents things from being logged globally in 'Boomerang'
        },
        'Boomerang.management.commands.PruneLocalPostsFromDb': {
            'handlers': ['boomerang_PruneLocalPostsFromDb_file'],
            'level': 'DEBUG',
            'propagate': False, # Prevents things from being logged globally in 'Boomerang'
        },
        # to stifle mysql logging
        'django.db.backends': {
            'handlers': ['null'],  # Quiet by default!
            'propagate': False,
            'level':'DEBUG',
        },
    }
}



